# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hyfn-products-library
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  profile: default

  region: eu-south-1
  # you can overwrite defaults here
  stage: development

  iam:
    role:
      statements:
        #   - Effect: 'Allow'
        #     Action:
        #       - 's3:PutObject'
        #     Resource: !GetAtt hyfnImagesBucket.Arn
        - Effect: Allow
          Action:
            - "kms:DescribeKey"
            - "kms:Encrypt"
            - "kms:Decrypt"
            - "kms:ReEncrypt*"
            - "kms:GenerateDataKey"
            - "kms:GenerateDataKeyWithoutPlaintext"
          Resource: !ImportValue hyfn-resources-${sls:stage}-paymentSecretKeyARN
        - Effect: Allow
          Action:
            - "sns:SetSMSAttributes"
            - "sns:Publish"
          Resource: "*"

  httpApi:
    cors:
      allowedOrigins:
        #- https://store.hyfn.xyz
        - "*"
      allowedHeaders:
        - Content-Type

      allowedMethods:
        - POST
      # allowCredentials: true
      exposedResponseHeaders:
        - Special-Response-Header
      maxAge: 6000 # In seconds
  environment:
    kmsKeyARN:
      Fn::ImportValue: !Sub "${self:custom.hyfnResources}-${sls:stage}-paymentSecretKeyARN"

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  # - serverless-offline
  # - serverless-esbuild

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - 'node_modules/node-fetch/**'

custom:
  hyfnResources: hyfn-resources
  webpack:
    webpackConfig: './webpack.config.js' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'yarn' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignor
    webpackIncludeModules:
      forceExclude:
        - aws-sdk

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createProductInLibrary:
    handler: .build/createProduct/createProduct.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/createProduct
  deleteProductInLibrary:
    handler: .build/deleteProduct/deleteProduct.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/deleteProduct
  generateImageURL:
    handler: .build/generateImageURL/generateImageURL.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/generateImageURL
  updateProductInLibrary:
    handler: .build/updateProduct/updateProduct.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/updateProduct
  getProductInLibrary:
    handler: .build/getProduct/getProduct.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getProduct
  getProductsInLibrary:
    handler: .build/getProducts/getProducts.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getProducts
  createCompanyDocument:
    handler: .build/createCompanyDocument/createCompanyDocument.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/createCompanyDocument
  updateCompanyInfo:
    handler: .build/updateCompanyInfo/updateCompanyInfo.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/updateCompanyInfo
  getCompanyDocument:
    handler: .build/getCompanyDocument/getCompanyDocument.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getCompanyDocument
  createBrand:
    handler: .build/createBrand/createBrand.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/createBrand
  updateBrand:
    handler: .build/updateBrand/updateBrand.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/updateBrand
  deleteBrand:
    handler: .build/deleteBrand/deleteBrand.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/deleteBrand
  getBrand:
    handler: .build/getBrand/getBrand.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getBrand
  getBrands:
    handler: .build/getBrands/getBrands.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getBrands
  getBrandsForList:
    handler: .build/getBrandsForList/getBrands.handler
    events:
      - httpApi:
          method: POST
          path: /productsLibrary/getBrandsForList
#    events:
#     - http:
#        path: delete-Product
#       method: POST
#      cors: false
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

##################################

# updateStoreOwnerInfo:
#     handler: .build/updateStoreOwnerInfo/updateStoreOwnerInfo.handler
#     url:
#       cors:
#         allowedHeaders:
#           - Content-Type

#         allowedMethods:
#           - POST
