# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hyfn-driver
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  profile: default
  deploymentMethod: direct

  region: eu-south-1

  # you can overwrite defaults here

  httpApi:
    cors:
      allowedOrigins:
        - https://driver.hyfn.xyz
        - '*'
      allowedHeaders:
        - Content-Type

      allowedMethods:
        - POST
      # allowCredentials: true
      exposedResponseHeaders:
        - Special-Response-Header
      maxAge: 6000 # In seconds
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

  - serverless-iam-roles-per-function

package:
  individually: true

#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# lambdaRole:
#   Type: AWS::IAM::Role
#   Properties:
#     Description: 'development iam role'
#     ManagedPolicyArns:
#       - ''
#     MaxSessionDuration: Integer
#     Path: String
#     PermissionsBoundary: String
#     Policies:
#       - Policy
#     RoleName: String
#     Tags:
#       - Tag
functions:
  findOrders:
    handler: .build/findOrders/findOrders.handler
    events:
      - httpApi:
          method: POST
          path: /driver/findOrders
  setOrderAsDelivered:
    handler: .build/setOrderAsDelivered/setOrderAsDelivered.handler
    events:
      - httpApi:
          method: POST
          path: /driver/setOrderAsDelivered
  reportOrder:
    handler: .build/reportOrder/reportOrder.handler
    events:
      - httpApi:
          method: POST
          path: /driver/reportOrder
  leaveOrder:
    handler: .build/leaveOrder/leaveOrder.handler
    events:
      - httpApi:
          method: POST
          path: /driver/leaveOrder

  takeOrder:
    handler: .build/takeOrder/takeOrder.handler
    events:
      - httpApi:
          method: POST
          path: /driver/takeOrder
  getActiveOrder:
    handler: .build/getActiveOrder/getActiveOrder.handler
    events:
      - httpApi:
          method: POST
          path: /driver/getActiveOrder

  setOrderAsPickedUp:
    handler: .build/setOrderAsPickedUp/setOrderAsPickedUp.handler
    events:
      - httpApi:
          method: POST
          path: /driver/setOrderAsPickedUp

  # createLocalCardTransaction:
  #   handler: .build/payWithLocalCard/createLocalCardTransaction.handler
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /driver/createLocalCardTransaction
  # getTransactionsList:
  #   handler: .build/payWithLocalCard/getTransactionsList.handler
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /driver/getTransactionsList

  # validateLocalCardTransaction:
  #   handler: .build/payWithLocalCard/validateLocalCardTransaction.handler
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /driver/validateLocalCardTransaction

  setProductAsPickedUp:
    handler: .build/setProductAsPickedUp/setProductAsPickedUp.handler
    events:
      - httpApi:
          method: POST
          path: /driver/setProductAsPickedUp
  setProductAsNotFound:
    handler: .build/setProductAsNotFound/setProductAsNotFound.handler
    events:
      - httpApi:
          method: POST
          path: /driver/setProductAsNotFound
  payStore:
    handler: .build/payStore/payStore.handler
    events:
      - httpApi:
          method: POST
          path: /driver/payStore
  createDriverDocument:
    handler: .build/createDriverDocument/createDriverDocument.handler
    events:
      - httpApi:
          method: POST
          path: /driver/createDriverDocument
  updateDriverDocument:
    handler: .build/updateDriverDocument/updateDriverDocument.handler
    events:
      - httpApi:
          method: POST
          path: /driver/updateDriverDocument
  getDriverDocument:
    handler: .build/getDriverDocument/getDriverDocument.handler
    events:
      - httpApi:
          method: POST
          path: /driver/getDriverDocument
  generateImageUrl:
    handler: .build/generateImageUrl/generateImageUrl.handler
    events:
      - httpApi:
          method: POST
          path: /driver/generateImageUrl
    url:
      cors:
        allowedHeaders:
          - Content-Type

        allowedMethods:
          - POST
  imageResizeTrigger:
    handler: .build/imageResizeTrigger/imageResizeTrigger.handler
    url:
      cors:
        allowedHeaders:
          - Content-Type

        allowedMethods:
          - POST
  getOrderHistory:
    handler: .build/getOrderHistory/getOrderHistory.handler
    events:
      - httpApi:
          method: POST
          path: /driver/getOrderHistory
 
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
